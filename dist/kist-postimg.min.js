/*! kist-postimg 0.1.3 - Load images via postpone or lazyload method. | Author: Ivan NikoliÄ‡, 2014 | License: MIT */
!function(a,b){var c="KistPostimg",d="KistPostimg",e="kist.postimg",f=function(b,c){this._element=b,this.settings=a.extend({},this.defaults,c)};a.extend(f.prototype,function(){var c={};return c.defaults={threshold:300,scrollTimeout:300,loadType:"postpone"},c.domRefs={windowEl:a(b)},c.init=function(){return this.checkPostImgStateDfd=a.Deferred(),this.getDomRefs(),a.when(this.checkPostImgState()).done(a.proxy(this.onCheckPostImgState,this)),this},c.getDomRefs=function(){this.domRefs=a.extend({},this.domRefs),this.domRefs.imagesEl=a(this._element)},c.bindUiActions=function(){this.domRefs.windowEl.on("scroll."+e,a.debounce(this.settings.scrollTimeout,a.proxy(this.fetchImages,this))),this.domRefs.windowEl.on("resize."+e,a.debounce(this.settings.scrollTimeout,a.proxy(this.fetchImages,this)))},c.checkPostImgState=function(){return this.domRefs.imagesEl=this.domRefs.imagesEl.filter(function(){return Boolean(a(this).data("isPostImgAlreadySet"))===!1}),this.domRefs.imagesEl.data("isPostImgAlreadySet",!0).addClass(d),0!==this.domRefs.imagesEl.length?this.checkPostImgStateDfd.resolve():this.checkPostImgStateDfd.reject(),this.checkPostImgStateDfd.promise()},c.onCheckPostImgState=function(){this.bindUiActions(),this.fetchImages()},c.fetchImages=function(){this.parseImages(this.domRefs.imagesEl.KistInView("getElementsInView",this.settings.threshold))},c.parseImages=function(b){b.each(a.proxy(function(b,c){var e=a(c);a.loadImage(e.data("src")).done(a.proxy(function(){e.attr("src",e.data("src")).attr("alt",e.data("alt")).removeAttr("width").removeAttr("height").addClass(d+"--is-loaded"),this.domRefs.imagesEl=this.domRefs.imagesEl.not(e)},this))},this))},c}());var g=function(a,b){f.call(this,a,b)};g.prototype=new f,g.prototype.constructor=g,a.extend(g.prototype,function(){var a={};return a.onCheckPostImgState=function(){this.fetchImages()},a.fetchImages=function(){this.parseImages(this.domRefs.imagesEl)},a}()),a[c]={},a[c].instances=[],a[c].defaults=f.prototype.defaults,a[c].fetchAllImages=function(){a.each(this.instances,function(a,b){b.fetchImages()})},a.fn[c]=function(b){return b=b||{},a[c].instances.push("lazyload"===b.loadType?new g(this,b).init():new f(this,b).init()),this}}(jQuery,window,document);